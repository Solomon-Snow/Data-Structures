package projectCode20280;

import java.util.ArrayList;
import java.util.HashMap;

/*
 * Map implementation using hash table with separate chaining.
 */

public class ChainHashMap<K, V> extends AbstractHashMap<K, V> {
	// a fixed capacity array of UnsortedTableMap that serve as buckets
	private UnsortedTableMap<K, V>[] table; // initialized within createTable

	/** Creates a hash table with capacity 11 and prime factor 109345121. */
	public ChainHashMap() {
		super();
	}

	/** Creates a hash table with given capacity and prime factor 109345121. */
	public ChainHashMap(int cap) {
		super(cap);
	}

	/** Creates a hash table with the given capacity and prime factor. */
	public ChainHashMap(int cap, int p) {
		super(cap, p);
	}

	/** Creates an empty table having length equal to current capacity. */
	@Override
	@SuppressWarnings({ "unchecked" })
	protected void createTable( ) {
		 table = (UnsortedTableMap<K,V>[ ]) new UnsortedTableMap[capacity];
		 }

	@Override
	protected V bucketGet(int h, K k) {
		 UnsortedTableMap<K,V> bucket = table[h];
		 if (bucket == null) return null;
		 return bucket.get(k);
		}

	@Override
	protected V bucketPut(int h, K k, V v) {
		 UnsortedTableMap<K,V> bucket = table[h];
		 if (bucket == null)
			 bucket = table[h] = new UnsortedTableMap<>( );
		 int oldSize = bucket.size( );
		 V answer = bucket.put(k,v);
		 n += (bucket.size() - oldSize); // size may have increased
		 return answer;
		 }

	@Override
	protected V bucketRemove(int h, K k) {
		 UnsortedTableMap<K,V> bucket = table[h];
		 if (bucket == null) return null;
		 int oldSize = bucket.size( );
		 V answer = bucket.remove(k);
		 n -= (oldSize - bucket.size( )); // size may have decreased
		 return answer;
		 }

	@Override
	public Iterable<Entry<K,V>> entrySet( ) {
		 ArrayList<Entry<K,V>> buffer = new ArrayList<>( );
		 for (int h=0; h < capacity; h++)
			 if (table[h] != null)
			 for (Entry<K,V> entry : table[h].entrySet( ))
			 buffer.add(entry);
		 return buffer;
		}
	public static void main(String[] args) {
		//HashMap<Integer, String> m = new HashMap<Integer, String>();
		ChainHashMap<Integer, String> m = new ChainHashMap<Integer, String>();
		m.put(1, "One");
		m.put(10, "Ten");
		m.put(11, "Eleven");
		m.put(20, "Twenty");
		
		System.out.println("m: " + m);
		
		m.remove(11);
		System.out.println("m: " + m);
	}
}
