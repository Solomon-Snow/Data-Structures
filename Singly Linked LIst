package projectCode20280;
import java.util.Iterator;
import java.util.Arrays;
import java.util.Iterator;
import java.util.NoSuchElementException;
public class SinglyLinkedList<E> implements List<E>
{
	public int last()
	{
		return 0;
	}
	private class Node<E>
	{
		private E element;
		private Node<E> next1;
		//private Node<E> iterator = this.next;
		public Node(E e, Node<E> n)
		{
			this.element = e;
			this.next1 = n;
		}
		public E getElement()
		{
			return element;
		}
		public Node<E> getNext()
		{
			return next1;
		}
		public void setNext(Node<E> next1)
		{
			this.next1 = next1;
		}
	}

	class SinglyLinkedListIterator implements Iterator<E>
	{
		private Node<E> current;
		private Node<E> previous1;
		private Node<E> previous2;
		private boolean removeCalled;
		public SinglyLinkedListIterator()
		{
			current = head;
			previous1 = null;
			previous2 = null;
			removeCalled = false;
		}
		@Override
		public boolean hasNext()
		{
			return current != null;
		}
		public E next() {
			if (current == null) {
				throw new NoSuchElementException();
			}
			E temp = current.getElement();
			previous2 = previous1;
			previous1 = current;
			current = current.getNext();
			removeCalled = false;
			return temp;
		}
		@Override
		public void remove()
		{
			if (previous1 == null || removeCalled)
			{
				throw new IllegalStateException();
			}
			if (previous2 == null)
			{
				head = current;
			}
			else
				{
				previous2.setNext(current);
				previous1 = previous2; //Update remove to previous 2
				}
			size--;
			removeCalled = true;
		}
	}
	private Node<E> head = null;
	private Node<E> tail = null;
	private int size;
	public E first()
	{
		if (isEmpty()) return null;
		return head.getElement();
	}
	@Override
	public boolean isEmpty()
	{
		return this.size() == 0;
	}

	@Override
	public E get(int i)
	{
		if (i < 0 || i >= size()) {
			throw new IndexOutOfBoundsException(i + "out of the range");
		}
		if (i < size() - 1) {
			Node<E> current = head;
			for (int j = 0; j < i; j++) {
				current = current.getNext(); // advance the node each time
			}
			return current.getElement(); //return element of the given index
		}
		return tail.getElement();
	}

	@Override
	public Iterator<E> iterator()
	{
		return new SinglyLinkedListIterator();
	}

	@Override
	public int size()
	{
		return this.size;
	}

	@Override
	public E remove(int i)
	{
		if (i < 0 || i >= size())
		{
			throw new IndexOutOfBoundsException(i + "out of bound!");
		}
		Iterator<E> iterator = this.iterator();
		for (int j = 0; j < i; j++)
		{
			iterator.next();
		}
		E e = iterator.next();
		iterator.remove();
		return e;
	}

	@Override
	public E removeFirst()
	{
		if (isEmpty())
		{
			return null;
		}
		E first = head.getElement();
		head = head.getNext();
		size--;
		if (size == 0)
		{
			tail = null;
		}
		return first;
	}

	@Override
	public E removeLast()
	{
		if (isEmpty())
		{
			return null;
		}
		Node<E> curr = head;
		Node<E> prev = null;

		while (curr.getNext() != null)
		{
			prev = curr;
			curr = curr.getNext();
		}

		prev.setNext(null);
		tail = prev;

		return curr.getElement();
	}

	@Override
	public void add(int i, E e)
	{
		if (i < 0 || i > size())
		{
			throw new IndexOutOfBoundsException();
		}
		if (i == size())
		{
			addLast(e);
			return;
		}
		if (i == 0)
		{
			addFirst(e);
		} else
			{
			Node<E> current = head;
			for (int j = 0; j < i - 1; j++)
			{
				current = current.getNext();
			}
			current.setNext(new Node<>(e, current.getNext()));
		}
		size++;
	}

	@Override
	public void addFirst(E e)
	{
		head = new Node<>(e, head);
		if (size == 0) {
			tail = head;
		}
		size++;
	}

	@Override
	public void addLast(E e)
	{
		Node<E> lastAdd = new Node<>(e, null);
		if (isEmpty()) {
			head = lastAdd;
			tail = head;
		} else {
			tail.setNext(lastAdd);
			tail = lastAdd;
		}
		size++;
	}
	public static <E> void reverse(E[] arr){
		Stack<E> buffer = new ArrayStack<>(arr.length);
		for (int i = 0; i < arr.length; i++)
			buffer.push(arr[i]);
		for (int j = 0; j < arr.length; j++)
			arr[j] = buffer.pop();
	}
	public static void main(String[] args) {
		Integer[] x = {2, 4, 6, 8, 10};
		SinglyLinkedList<Integer> ll = new SinglyLinkedList<>();
		String[] y = {"Data","Structures", "&", "Algorithms"};
		System.out.println("String Array " + Arrays.toString(y));
		System.out.println("Integer Array  " + Arrays.toString(x));
		//System.out.println("Reverse Integers");
		//reverse(x);
		//System.out.println("Reverse Strings");
		//reverse(y);
		System.out.println("String Array = " + Arrays.toString(y));
		System.out.println("\n");
		System.out.println("AddFirst 1");
		System.out.println("Integer Array = " + Arrays.toString(x));
		ll.addFirst(8);
		ll.addFirst(6);
		ll.addFirst(4);
		ll.addLast(12);
		ll.addFirst(5);
		ll.addFirst(9);
		ll.add(2, 97);
	}
}
